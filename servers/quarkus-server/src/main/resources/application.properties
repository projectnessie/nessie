#
# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Nessie settings
### default base branch name
nessie.server.default-branch=main
nessie.server.send-stacktrace-to-client=false

# To provide secrets via a keystore via Quarkus, the following configuration
# options need to be configured accordingly.
# For details see https://quarkus.io/guides/config-secrets#store-secrets-in-a-keystore
#smallrye.config.source.keystore."properties".path=properties
#smallrye.config.source.keystore."properties".password=arealpassword
#smallrye.config.source.keystore."properties".handler=aes-gcm-nopadding
#smallrye.config.source.keystore."key".path=key
#smallrye.config.source.keystore."key".password=anotherpassword

# Reverse Proxy Settings
#
# These config options are mentioned only for documentation purposes. Consult the
# Quarkus documentation for "Running behind a reverse proxy" and configure those
# depending on your actual needs.
#
# See https://quarkus.io/guides/http-reference#reverse-proxy
#
# Do NOT enable these option unless your reverse proxy (for example istio or nginx)
# is properly setup to set these headers but also filter those from incoming requests.
#
#quarkus.http.proxy.proxy-address-forwarding=true
#quarkus.http.proxy.allow-x-forwarded=true
#quarkus.http.proxy.enable-forwarded-host=true
#quarkus.http.proxy.enable-forwarded-prefix=true
#quarkus.http.proxy.trusted-proxies=127.0.0.1

# Support for external secrets managers - see http://127.0.0.1:8000/nessie-latest/configuration/#secrets-manager-settings
#
#nessie.secrets.type=
# VAULT:  Hashicorp Vault. See https://docs.quarkiverse.io/quarkus-vault/dev/index.html#configuration-reference
#         for the Quarkus docs for Hashicorp Vault for specific information.
# AMAZON: AWS Secrets Manager. See https://docs.quarkiverse.io/quarkus-amazon-services/dev/amazon-secretsmanager.html#_configuration_reference
#         for the Quarkus docs for Amazon Services / Secrets Manager for specific information.
# AZURE:  AWS Secrets Manager. NOT SUPPORTED YET!
#         See https://docs.quarkiverse.io/quarkus-azure-services/dev/quarkus-azure-key-vault.html#_extension_configuration_reference
#         for the Quarkus docs for Azure Key Vault</a> for specific information.
# GOOGLE: Google Cloud Secrets Manager. NOT SUPPORTED YET!
#nessie.secrets.cache.max-elements=1000
#nessie.secrets.cache.ttl=PT15M
#
# When using Google Cloud Secret Manager you may have to configure this to 'true'
quarkus.google.cloud.enable-metadata-server=false
# To enable a specific secrets manager consult the documentations for those, more
# information here: https://projectnessie.org/nessie-latest/configuration/#secrets-manager-settings

##### Nessie Catalog

# Optional: validate that referenced secrets exist (default is false)
#nessie.catalog.validate-secrets=true

# Optional: disable health check for object stores (default is true)
#nessie.catalog.object-stores.health-check.enabled=false

# Iceberg default config (can be overridden per warehouse)
#nessie.catalog.iceberg-config-defaults.prop=value
#nessie.catalog.iceberg-config-overrides.prop=value

# Warehouses

# default warehouse
#nessie.catalog.default-warehouse=warehouse
#nessie.catalog.warehouses.warehouse.location=<object-store-URI>
#nessie.catalog.warehouses.warehouse.iceberg-config-defaults.prop-name=prop-value
#nessie.catalog.warehouses.warehouse.iceberg-config-overrides.prop-name=prop-value
# additional warehouses
#nessie.catalog.warehouses.another-warehouse.location=<object-store-URI>

# S3 settings

# default S3 settings
#nessie.catalog.service.s3.default-options.endpoint=http://localhost:9000
#nessie.catalog.service.s3.default-options.path-style-access=false
#nessie.catalog.service.s3.default-options.region=us-west-2
#nessie.catalog.service.s3.default-options.access-key=urn:nessie-secret:quarkus:my-secrets.s3-default
#my-secrets.s3-default.name=awsAccessKeyId
#my-secrets.s3-default.secret=awsSecretAccessKey
# per-bucket S3 settings
#nessie.catalog.service.s3.buckets.bucket1.endpoint=s3a://bucket1
#nessie.catalog.service.s3.buckets.bucket1.access-key=urn:nessie-secret:quarkus:my-secrets.s3-bucket
#nessie.catalog.service.s3.buckets.bucket1.region=us-east-1
#my-secrets.s3-bucket.name=awsAccessKeyId1
#my-secrets.s3-bucket.secret=awsSecretAccessKey1

# GCS settings

#nessie.catalog.service.gcs.default-options.host=http://localhost:4443
#nessie.catalog.service.gcs.default-options.project-id=nessie
#nessie.catalog.service.gcs.default-options.auth-type=access_token
#nessie.catalog.service.gcs.default-options.oauth2-token=urn:nessie-secret:quarkus:my-secrets.gcs-default
#my-secrets.gcs-default.token=tokenRef
# per-bucket GCS settings
#nessie.catalog.service.gcs.buckets.bucket1.host=http://localhost:4443
#nessie.catalog.service.gcs.buckets.bucket1.project-id=nessie
#nessie.catalog.service.gcs.buckets.bucket1.auth-type=access_token
#nessie.catalog.service.gcs.buckets.bucket1.oauth2-token=urn:nessie-secret:quarkus:my-secrets.gcs-bucket
#my-secrets.gcs-bucket.token=tokenRef

# ADLS settings

#nessie.catalog.service.adls.default-options.endpoint=http://localhost/adlsgen2/bucket
#nessie.catalog.service.adls.default-options.auth-type=none
#nessie.catalog.service.adls.default-options.account=urn:nessie-secret:quarkus:my-secrets.adls-default
#nessie.catalog.service.adls.default-options.configuration.propname=propvalue
#my-secrets.adls-default.name=account
#my-secrets.adls-default.secret=secret
# per-file-system ADLS settings
#nessie.catalog.service.adls.file-systems.bucket1.endpoint=http://localhost/adlsgen2/bucket
#nessie.catalog.service.adls.file-systems.bucket1.auth-type=none
#nessie.catalog.service.adls.file-systems.bucket1.account=urn:nessie-secret:quarkus:my-secrets.adls-fs
#nessie.catalog.service.adls.file-systems.bucket1.configuration.propname=propvalue
#my-secrets.adls-fs.name=account
#my-secrets.adls-fs.secret=secret



## Nessie authorization settings
### This will perform authorization on branches/tags and content where rule definitions are
### using a Common Expression Language (CEL) expression (an intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md).
### Rule definitions are of the form nessie.server.authorization.rules.<ruleId>=<rule_expression>
### Available variables within the <rule_expression> are: 'op' / 'role' / 'ref' / 'path'
### The 'op' variable in the <rule_expression> can be any of:
### 'VIEW_REFERENCE', 'CREATE_REFERENCE', 'DELETE_REFERENCE', 'READ_ENTRIES', 'READ_CONTENT_KEY', 'LIST_COMMIT_LOG',
### 'COMMIT_CHANGE_AGAINST_REFERENCE', 'ASSIGN_REFERENCE_TO_HASH', 'UPDATE_ENTITY', 'READ_ENTITY_VALUE', 'DELETE_ENTITY', 'VIEW_REFLOG'
### The 'role' refers to the user's role and can be any string
### The 'ref' refers to a string representing a branch/tag name
### The 'path' refers to the Key for the content of an object and can be any string
### Some "use-case-based" example rules are shown below (in practice you might rather create a single rule that allows e.g. branch creation/deletion/commits/...):
# nessie.server.authorization.enabled=false
# nessie.server.authorization.type=CEL
# nessie.server.authorization.rules.allow_branch_listing=\
#   op=='VIEW_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_branch_creation=\
#   op=='CREATE_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_branch_deletion=\
#   op=='DELETE_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_listing_commitlog=\
#   op=='LIST_COMMIT_LOG' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_entries_reading=\
#   op=='READ_ENTRIES' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_assigning_ref_to_hash=\
#   op=='ASSIGN_REFERENCE_TO_HASH' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_commits=\
#   op=='COMMIT_CHANGE_AGAINST_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_reading_entity_value=\
#   op=='READ_ENTITY_VALUE' && role=='test_user' && path.startsWith('allowed.')
# nessie.server.authorization.rules.allow_updating_entity=\
#   op=='UPDATE_ENTITY' && role=='test_user' && path.startsWith('allowed.')
# nessie.server.authorization.rules.allow_deleting_entity=\
#   op=='DELETE_ENTITY' && role=='test_user' && path.startsWith('allowed.')
# nessie.server.authorization.rules.allow_commits_without_entity_changes=\
#   op=='COMMIT_CHANGE_AGAINST_REFERENCE' && role=='test_user2' && ref.startsWith('allowedBranch')
# nessie.server.authorization.rules.allow_all=\
#   op in ['VIEW_REFERENCE','CREATE_REFERENCE','DELETE_REFERENCE','LIST_COMMITLOG','READ_ENTRIES','LIST_COMMIT_LOG',\
#   'COMMIT_CHANGE_AGAINST_REFERENCE','ASSIGN_REFERENCE_TO_HASH','UPDATE_ENTITY','READ_ENTITY_VALUE','DELETE_ENTITY'] \
#   && role=='admin_user'
# nessie.server.authorization.rules.allow_listing_reflog=\
#   op=='VIEW_REFLOG' && role=='admin_user'

### which type of version store to use: IN_MEMORY, ROCKSDB, DYNAMODB2, MONGODB2, CASSANDRA2, JDBC2, BIGTABLE.
# Note: the version store type JDBC is deprecated, please use the Nessie Server Admin Tool to migrate to JDBC2.
# Note: the version store type CASSANDRA is deprecated, please use the Nessie Server Admin Tool to migrate to CASSANDRA2.
# Note: the version store type DYNAMODB is deprecated, please use the Nessie Server Admin Tool to migrate to DYNAMODB2.
# Note: the version store type MONGODB is deprecated, please use the Nessie Server Admin Tool to migrate to MONGODB2.
nessie.version.store.type=IN_MEMORY

# Object cache size as a value relative to the JVM's max heap size. The `cache-capacity-fraction-adjust-mb`
# value will be "kept free" when calculating the effective cache size. Set `cache-capacity-fraction-of-heap`
# to 0 to use a fixed size.
# Entirely disabling the cache is not recommended and will negatively affect performance.
#nessie.version.store.persist.cache-capacity-fraction-of-heap=0.7
#nessie.version.store.persist.cache-capacity-fraction-adjust-mb=256
# When having very small heaps, use the `cache-capacity-fraction-min-size-mb` value. Set to `0` to disable
# the min cache capacity.
#nessie.version.store.persist.cache-capacity-fraction-min-size-mb=64
# Fixed size of Nessie's object cache in MB.
# Settings this value to 0 disables the fixed size object cache.
# Entirely disabling the cache is not recommended and will negatively affect performance.
#nessie.version.store.persist.cache-capacity-mb=0

## Transactional database configuration

# Note: Nessie Quarkus Server comes with built-in support for Postgres and MariaDB, or any database
# compatible with these.
# Select the datasource to use with the `nessie.version.store.persist.jdbc.datasource` property;
# The possible built-in values are: "default" (deprecated), "postgresql", "mariadb", "mysql" and "h2".
#nessie.version.store.persist.jdbc.datasource=default

# Default datasource configuration (deprecated; use quarkus.datasource.postgresql.* instead):
quarkus.datasource.db-kind=postgresql
quarkus.datasource.active=false
quarkus.datasource.devservices.enabled=false
#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/my_database
#quarkus.datasource.username=<your username>
#quarkus.datasource.password=<your password>

# Postgres datasource configuration:
quarkus.datasource.postgresql.db-kind=postgresql
quarkus.datasource.postgresql.active=false
quarkus.datasource.postgresql.devservices.enabled=false
#quarkus.datasource.postgresql.jdbc.url=jdbc:postgresql://localhost:5432/my_database
#quarkus.datasource.postgresql.username=<your username>
#quarkus.datasource.postgresql.password=<your password>

# MariaDB datasource configuration:
quarkus.datasource.mariadb.db-kind=mariadb
quarkus.datasource.mariadb.active=false
quarkus.datasource.mariadb.devservices.enabled=false
#quarkus.datasource.mariadb.username=<your username>
#quarkus.datasource.mariadb.password=<your password>
#quarkus.datasource.mariadb.jdbc.url=jdbc:mariadb://localhost:3306/my_database
# Do not remove or modify the following, as these optimization flags are incompatible with Nessie;
# see https://mariadb.com/docs/server/connect/programming-languages/java/batch.
quarkus.datasource.mariadb.jdbc.additional-jdbc-properties.useBulkStmts=false
quarkus.datasource.mariadb.jdbc.additional-jdbc-properties.useBulkStmtsForInserts=false

# MySQL datasource configuration:
quarkus.datasource.mysql.db-kind=mariadb
quarkus.datasource.mysql.active=false
quarkus.datasource.mysql.devservices.enabled=false
#quarkus.datasource.mysql.username=<your username>
#quarkus.datasource.mysql.password=<your password>
#quarkus.datasource.mysql.jdbc.url=jdbc:mysql://localhost:3306/my_database

# H2 datasource configuration:
quarkus.datasource.h2.db-kind=h2
quarkus.datasource.h2.active=false
quarkus.datasource.h2.devservices.enabled=false
quarkus.datasource.h2.jdbc.url=jdbc:h2:mem:nessie;MODE=PostgreSQL

## RocksDB version store specific configuration
#nessie.version.store.persist.rocks.database-path=nessie-rocksdb

## MongoDB version store specific configuration
quarkus.mongodb.database=nessie
quarkus.mongodb.metrics.enabled=true
#quarkus.mongodb.connection-string=mongodb://localhost:27017
# fixed at buildtime
quarkus.mongodb.devservices.enabled=false

## Dynamo
quarkus.dynamodb.aws.region=us-west-2
quarkus.dynamodb.aws.credentials.type=DEFAULT
# quarkus.dynamodb.endpoint-override=http://localhost:8000
quarkus.dynamodb.sync-client.type=apache
quarkus.dynamodb.devservices.enabled=false

## Apache Cassandra
quarkus.cassandra.keyspace=nessie
#quarkus.cassandra.contact-points={cassandra_ip}:9042
#quarkus.cassandra.local-datacenter={dc_name}
#quarkus.cassandra.auth.username=
#quarkus.cassandra.auth.password=
quarkus.cassandra.health.enabled=false
## Nessie specific Apache Cassandra properties
#nessie.version.store.cassandra.ddl-timeout=PT5S
#nessie.version.store.cassandra.dml-timeout=PT3S

# BigTable
#
# To use the Bigtable emulator, configure its host and port using these options.
# WARNING!! Using the emulator effectively disables authentication against BigTable (emulator).
# nessie.version.store.persist.bigtable.emulator-host=
# nessie.version.store.persist.bigtable.emulator-port=
#
# Required options, see https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/
# quarkus.google.cloud.project-id=
# nessie.version.store.persist.bigtable.instance-id=
# nessie.version.store.persist.bigtable.app-profile-id=
#
# Prefix for tables in BigTable.
# nessie.version.store.persist.bigtable.table-prefix=
#
# See https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/#authenticating for
# authentication options.

# Quarkus settings
## Visit here for all configs: https://quarkus.io/guides/all-config
## some parameters are only configured at build time. These have been marked as such https://quarkus.io/guides/config#overriding-properties-at-runtime
quarkus.log.level=INFO
quarkus.log.console.level=INFO
quarkus.log.console.json.enabled=false
#quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%X{traceId},%X{spanId},%X{sampled}] [%c{3.}] (%t) %s%e%n
quarkus.log.file.level=INFO
quarkus.log.file.json.enabled=false
quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %h %N[%i] %-5p [%X{traceId},%X{spanId},%X{sampled}] [%c{3.}] (%t) %s%e%n
quarkus.log.category."io.netty".level=WARN
# Effectively disable HTTP request logging to the console (HTTP access logs happen at INFO level)
quarkus.log.category."io.quarkus.http.access-log".level=${HTTP_ACCESS_LOG_LEVEL:INFO}
# Prevent the annoying Netty version mismatch (there's nothing we can do about it!)
quarkus.log.category."com.azure.core.http.netty.implementation.Utility".level=ERROR

# Verify that there are no properties that cannot be mapped to any @ConfigMapping.
# This does not necessarily catch every property, only those that are in the "namespace" of any @ConfigMapping.
quarkus.config.mapping.validate-unknown=true

## Quarkus http related settings
quarkus.http.port=19120
quarkus.http.test-port=0
quarkus.http.access-log.enabled=true
# fixed at buildtime
quarkus.http.enable-compression=true
quarkus.http.enable-decompression=true
quarkus.http.body.handle-file-uploads=false
quarkus.http.compress-media-types=application/json,text/html,text/plain

## Quarkus auth settings
#quarkus.oidc.client-id=
#quarkus.oidc.credentials.secret=
nessie.server.authentication.enabled=false
nessie.server.authentication.anonymous-paths=\
  /iceberg/v1/oauth/tokens,\
  /nessie-openapi/openapi.yaml,\
  /favicon.ico
nessie.server.authentication.anonymous-path-prefixes=\
  /tree,\
  /content,\
  /notfound,\
  /commits,\
  /nessie-openapi
quarkus.http.auth.basic=false
# OIDC-enabled is a build-time property (cannot be overwritten at run-time), MUST be true.
# However, we can overwrite the tenant-enabled property at run-time.
quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${nessie.server.authentication.enabled}

#quarkus.oidc.ui-app.client-id=
#quarkus.oidc.ui-app.credentials.secret=
#quarkus.oidc.ui-app.auth-server=
#quarkus.oidc.ui-app.token-issuer=
#quarkus.oidc.ui-app.application-type=web-app
#quarkus.oidc.ui-app.tenant-paths=/,/tree*,/content*,/notfound*,/commits*

quarkus.management.enabled=true
quarkus.management.port=9000
quarkus.management.test-port=0

## Quarkus Swagger-UI settings
# Disabled, because the OpenAPI path "mismatches" between the interfaces in the `org.projectnessie.api.v1/2.http`
# packages and the implementations in the `org.projectnessie.services.rest` package. Those do either produce
# duplicate entries in the Swagger UI or, when only including the implementations via mp.openapi.scan.include, no
# entries. Also, the Swagger UI is rather a dev-mode thing and is only available on the Quarkus management port and
# therefore not publicly available.
quarkus.swagger-ui.always-include=false
quarkus.swagger-ui.enabled=false
# The /q/openapi endpoint is disabled for the same reasons
quarkus.smallrye-openapi.enabled=false

# Required for propagation of request-scoped beans to health checks
quarkus.smallrye-health.context-propagation=true

# OpenAPI
mp.openapi.extensions.smallrye.operationIdStrategy=METHOD
# Don't scan the interfaces, because scanning those causes the annoying "SROAP07903: Duplicate operationId" warning.
mp.openapi.scan.exclude.packages=org.projectnessie.api.v1.http,org.projectnessie.api.v2.http

quarkus.application.name=Nessie

## sentry specific settings
quarkus.log.sentry.level=ERROR
quarkus.log.sentry.in-app-packages=org.projectnessie
quarkus.log.sentry.enabled=false
#quarkus.log.sentry.dsn=https://<fillin>.ingest.sentry.io/<fillin>

quarkus.banner.path=nessie-banner.txt

# Quarkus build settings - only change if building/deploying locally

## Quarkus required setting for third party indexing
# fixed at buildtime
quarkus.index-dependency.guava.group-id=com.google.guava
quarkus.index-dependency.guava.artifact-id=guava
quarkus.index-dependency.protobuf.group-id=com.google.protobuf
quarkus.index-dependency.protobuf.artifact-id=protobuf-java
quarkus.index-dependency.avro.group-id=org.apache.avro
quarkus.index-dependency.avro.artifact-id=avro

quarkus.arc.ignored-split-packages=\
  org.projectnessie.jaxrs.tests,\
  org.projectnessie.quarkus.config,\
  org.projectnessie.quarkus.providers,\
  org.projectnessie.quarkus.providers.versionstore,\
  org.projectnessie.server.authz,\
  org.projectnessie.server.configchecks,\
  org.projectnessie.server.catalog,\
  org.projectnessie.server.filters

# Metrics collection settings
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.binder.jvm=true
# Custom tags for metrics
nessie.metrics.tags.application=Nessie
# nessie.metrics.tags.service=nessie
# nessie.metrics.tags.environment=prod
# nessie.metrics.tags.region=us-west-2

# Trace collection settings
# (see https://quarkus.io/guides/opentelemetry#quarkus-opentelemetry_quarkus.otel.logs.exporter)
# The trace collector endpoint URL to connect to.
# If this property is not explicitly redefined by user, OpenTelemetry SDK will be disabled when Nessie starts.
# quarkus.otel.exporter.otlp.traces.endpoint=http://otlp-collector:4317
quarkus.otel.traces.sampler=parentbased_always_on
quarkus.otel.traces.sampler.arg=1.0d

# Version Store Events configuration
#nessie.version.store.events.enable=true
#nessie.version.store.events.metrics.enable=true
#nessie.version.store.events.trace.enable=true
#nessie.version.store.events.static-properties.key1=value1
#nessie.version.store.events.retry.max-attempts=1
#nessie.version.store.events.retry.initial-delay=PT1S
#nessie.version.store.events.retry.max-delay=PT5S

# order matters below, since the first matching pattern will be used
quarkus.micrometer.binder.http-server.match-patterns=\
  /api/v2/trees/.*/contents/.*=/api/v2/trees/{ref}/contents/{key},\
  /api/v2/trees/.*/contents=/api/v2/trees/{ref}/contents,\
  /api/v2/trees/.*/entries=/api/v2/trees/{ref}/entries,\
  /api/v2/trees/.*/diff/.*=/api/v2/trees/{from-ref}/diff/{to-ref},\
  /api/v2/trees/.*/history=/api/v2/trees/{ref}/history,\
  /api/v2/trees/.*/history/commit=/api/v2/trees/{ref}/history/commit,\
  /api/v2/trees/.*/history/merge=/api/v2/trees/{ref}/history/merge,\
  /api/v2/trees/.*/history/transplant=/api/v2/trees/{ref}/history/transplant,\
  /api/v2/trees/.*=/api/v2/trees/{ref},\
  /api/v1/diffs/.*=/api/v1/diffs/{diff_params},\
  /api/v1/trees/branch/.*/commit=/api/v1/trees/branch/{branchName}/commit,\
  /api/v1/trees/branch/.*/transplant=/api/v1/trees/branch/{branchName}/transplant, \
  /api/v1/trees/branch/.*/merge=/api/v1/trees/branch/{branchName}/merge, \
  /api/v1/trees/branch/.*=/api/v1/trees/branch/{ref},\
  /api/v1/trees/tree/.*/entries=/api/v1/trees/tree/{ref}/entries,\
  /api/v1/trees/tree/.*/log=/api/v1/trees/tree/{ref}/log, \
  /api/v1/trees/tree/.*=/api/v1/trees/tree/{ref}, \
  /api/v1/trees/.*/.*=/api/v1/trees/{referenceType}/{ref}, \
  /api/v1/namespaces/namespace/.*/.*=/api/v1/namespaces/namespace/{ref}/{name}, \
  /api/v1/namespaces/.*=/api/v1/namespaces/{ref}, \
  /catalog/v1/trees/.*/sign/.*=/catalog/v1/trees/{ref}/sign/{key}, \
  /catalog/v1/trees/.*/commit=/catalog/v1/trees/{ref}/commit, \
  /catalog/v1/trees/.*/snapshots=/catalog/v1/trees/{ref}/snapshots, \
  /catalog/v1/trees/.*/snapshot/.*=/catalog/v1/trees/{ref}/snapshot/{key}, \
  /catalog/v1/trees/.*/manifest-list/.*=/catalog/v1/trees/{ref}/manifest-list/{key}, \
  /catalog/v1/trees/.*/manifest-file/.*=/catalog/v1/trees/{ref}/manifest-file/{key}, \
  /catalog/v1/trees/.*/data-file/.*=/catalog/v1/trees/{ref}/data-file/{key}, \
  /iceberg/.*/v1/config=/iceberg/{reference}/v1/config, \
  /iceberg/v1/.*/s3-sign/.*=/iceberg/v1/{prefix}/s3-sign/{identifier}, \
  /iceberg/v1/.*/namespaces/.*/properties=/iceberg/v1/{prefix}/namespaces/{namespace}/properties, \
  /iceberg/v1/.*/namespaces/.*/register=/iceberg/v1/{prefix}/namespaces/{namespace}/register, \
  /iceberg/v1/.*/namespaces/.*/tables/.*/metrics=/iceberg/v1/{prefix}/namespaces/{namespace}/tables/{table}/metrics, \
  /iceberg/v1/.*/namespaces/.*/tables/.*=/iceberg/v1/{prefix}/namespaces/{namespace}/tables/{table}, \
  /iceberg/v1/.*/namespaces/.*/tables=/iceberg/v1/{prefix}/namespaces/{namespace}/tables, \
  /iceberg/v1/.*/namespaces/.*/views/.*/metrics=/iceberg/v1/{prefix}/namespaces/{namespace}/views/{view}/metrics, \
  /iceberg/v1/.*/namespaces/.*/views/.*=/iceberg/v1/{prefix}/namespaces/{namespace}/views/{view}, \
  /iceberg/v1/.*/namespaces/.*/views=/iceberg/v1/{prefix}/namespaces/{namespace}/views, \
  /iceberg/v1/.*/namespaces/.*=/iceberg/v1/{prefix}/namespaces/{namespace}, \
  /iceberg/v1/.*/namespaces=/iceberg/v1/{prefix}/namespaces, \
  /iceberg/v1/.*/tables/rename=/iceberg/v1/{prefix}/tables/rename, \
  /iceberg/v1/.*/views/rename=/iceberg/v1/{prefix}/views/rename, \
  /iceberg/v1/.*/transactions/commit=/iceberg/v1/{prefix}/transactions/commit

quarkus.devservices.enabled=false

# Disable Micrometer JVM-Metrics for tests.
#
# TL;DR Quarkus restarts (due to profile/configuration changes) causes memory leaks with
# Micrometer's JVM GC Metrics.
#
# See https://github.com/quarkusio/quarkus/issues/24210#issuecomment-1064833013 why OOMs, or worse,
# endless 'Retried waiting for GCLocker too often allocating * words' messages instead of a
# "proper OutOfMemoryException" happen.
%test.quarkus.micrometer.binder.jvm=false

# (Most) tests do not need tracing - turn it off to have less log "spam".
%test.quarkus.otel.traces.exporter=none
# Turn off OIDC connection error in tests - DO NOT PUT THIS SETTING INTO YOUR PRODUCTION CODE,
# because it would hide other OIDC issues as well!
%test.quarkus.log.category."io.quarkus.oidc.common.runtime.OidcCommonUtils".level=OFF
#%test.quarkus.test.arg-line=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005
%test.quarkus.arc.exclude-types=org.projectnessie.objectstoragemock.**
# Prevent Iceberg's org.apache.iceberg.util.Tasks to spam the log with stack-traces
%test.quarkus.log.category."org.apache.iceberg.util".level=ERROR
%test.quarkus.log.category."org.projectnessie.server.configchecks".level=ERROR

# Disable JSON log format for dev and test
%dev.quarkus.log.console.json=false
%test.quarkus.log.console.json=false
